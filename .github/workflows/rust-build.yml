name: Rust Build

on:
    pull_request:
        branches:
            - "main"

env:
    CARGO_TERM_COLOR: always

jobs:
    build:
        name: Build for ${{ matrix.os_target }}
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                include:
                    - os: ubuntu-latest
                      target_triple: x86_64-unknown-linux-gnu
                      make_target: build-linux-amd64
                      artifact_name: gito-linux-amd64
                      binary_path: "target/x86_64-unknown-linux-gnu/release/gito"
                      os_target: Linux-AMD64
                    - os: macos-latest
                      target_triple: x86_64-apple-darwin
                      make_target: build-macos-amd64
                      artifact_name: gito-macos-amd64
                      binary_path: "target/x86_64-apple-darwin/release/gito"
                      os_target: macOS-AMD64
                    - os: macos-latest
                      target_triple: aarch64-apple-darwin
                      make_target: build-macos-arm64
                      artifact_name: gito-macos-arm64
                      binary_path: "target/aarch64-apple-darwin/release/gito"
                      os_target: macOS-ARM64
                    - os: windows-latest
                      target_triple: x86_64-pc-windows-msvc
                      make_target: build-windows-amd64
                      artifact_name: gito-windows-amd64.exe
                      binary_path: "target/x86_64-pc-windows-msvc/release/gito.exe"
                      os_target: Windows-AMD64

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Rust and add target
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  target: ${{ matrix.target_triple }}
                  override: true

            - name: Install make (for Windows runners)
              if: runner.os == 'Windows'
              run: choco install make
              shell: powershell

            - name: Build with Makefile
              run: make ${{ matrix.make_target }}

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.artifact_name }}
                  path: ${{ matrix.binary_path }}
                  if-no-files-found: error

    release:
        name: Create GitHub Release
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'pull_request' && github.head_ref == 'release')
        needs: build
        permissions:
            contents: write
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Extract version from Cargo.toml
              id: extract_version
              run: |
                  VERSION=$(grep -m1 "version" Cargo.toml | cut -d '"' -f2)
                  echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
                  echo "Extracted version: $VERSION"

            - name: Download all build artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Debug - List artifacts structure
              run: find artifacts -type f | sort

            - name: Rename files for release
              run: |
                  mkdir -p release
                  cp artifacts/gito-linux-amd64/gito release/gito-linux-amd64
                  cp artifacts/gito-macos-amd64/gito release/gito-macos-amd64
                  cp artifacts/gito-macos-arm64/gito release/gito-macos-arm64
                  cp artifacts/gito-windows-amd64.exe/gito.exe release/gito-windows-amd64.exe
                  chmod +x release/*
                  ls -la release/

            - name: Extract release notes from CHANGELOG.md
              id: extract_release_notes
              run: |
                  VERSION="${{ steps.extract_version.outputs.VERSION }}"
                  # Extract the content for the current version from CHANGELOG.md
                  # From the line after "## [$VERSION]" to the line before the next "##" or EOF
                  RELEASE_NOTES=$(awk -v version="${VERSION}" '
                    BEGIN { found = 0; }
                    /^## \['"${VERSION}"'\]/ { found = 1; next; }
                    /^## \[/ { if (found) exit; }
                    { if (found) print; }
                  ' CHANGELOG.md)
                  # Escape newlines for GitHub Actions output
                  RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
                  RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
                  RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
                  echo "RELEASE_NOTES=${RELEASE_NOTES}" >> $GITHUB_OUTPUT

            - name: Create Release and Upload Assets
              uses: softprops/action-gh-release@v2
              with:
                  files: |
                      release/gito-linux-amd64
                      release/gito-macos-amd64
                      release/gito-macos-arm64
                      release/gito-windows-amd64.exe
                  tag_name: v${{ steps.extract_version.outputs.VERSION }}
                  body: |
                      # Release v${{ steps.extract_version.outputs.VERSION }}

                      ${{ steps.extract_release_notes.outputs.RELEASE_NOTES }}

                      ## Installation

                      Download the appropriate binary for your system and place it in your PATH.
              env:
                  GITHUB_TOKEN: ${{ github.token }}
